name: CI WorkFlow

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - release/** # trigger github event
    # types: [opened, synchronize, reopened, closed]

concurrency: # prevent multiple run
  # group: 'ci-workflow' # unique group name
  group: ${{github.workflow}}-${{github.ref}} # unique group name, github ref is branch
  cancel-in-progress: true # cancel in-progress runs

# on: workflow_dispatch // manual trigger

# env: # global env variables
#   os: ubuntu

jobs:
  # build: # job name
  #   # strategy:
  #   #   matrix:
  #   #     os: [ubuntu-latest, macos-latest, windows-latest] # jobs matrix
  #   #     # node: [21, 22] # can use multiple matrix
  #   #     node: [22] # can use multiple matrix
  #   # runs-on: ${{ matrix.os }} # can use custom runners too
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code # git clones
  #       uses: actions/checkout@v5 # checkout code

  #     # install system dependencies
  #     - name: Set up Node
  #       uses: actions/setup-node@v5
  #       with:
  #         node-version: '24'
  #         cache: 'npm'

  #     - name: Install dependencies
  #       run: npm ci
  #     #   working-directory: ./frontend # change directory

  #     - name: prisma generate
  #       run: npx prisma generate

  #     # - name: Cache node modules
  #     #   id: cache-node-modules
  #     #   uses: actions/cache@v4
  #     #   with:
  #     #     path: node_modules
  #     #     key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
  #     #     restore-keys: |
  #     #       ${{ runner.os }}-node-modules-

  #     - name: Build the project
  #       run: npm run build

  #     - name: Operation System
  #       run: echo "This is running on $os"

  # lint:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v5

  #     - name: Set up Node
  #       uses: actions/setup-node@v5
  #       with:
  #         node-version: '24'
  #         cache: 'npm'

  #     - name: Install dependencies
  #       run: npm ci

  #     - name: Run linter
  #       run: npm run lint

  # test:
  #   env:
  #     DATABASE_URL: postgresql://${{secrets.POSTGRES_USERNAME}}:${{secrets.POSTGRES_PASSWORD}}@localhost:5432/shop-product-docker
  #   runs-on: ubuntu-latest
  #   # services:
  #   #   postgres:
  #   #     image: postgres:17
  #   #     env:
  #   #       POSTGRES_USER: ${{secrets.POSTGRES_USERNAME}}
  #   #       POSTGRES_PASSWORD: ${{secrets.POSTGRES_PASSWORD}}
  #   #       POSTGRES_DB: shop-product-docker
  #   #     ports:
  #   #       - "5432:5432"
  #   #     options: >-
  #   #       --health-cmd pg_isready
  #   #       --health-interval 10s
  #   #       --health-timeout 5s
  #   #       --health-retries 5

  #   needs: build # job dependency
  #   # permissions: # job level permissions
  #   #   contents: read # for actions/checkout
  #   #   packages: write # for uploading code coverage to github package registry
  #     # id-token: write # for actions/checkout
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v5

  #     - name: Set up Node
  #       uses: actions/setup-node@v5
  #       with:
  #         node-version: '24'
  #         cache: 'npm'

  #         # Start PostgreSQL with Docker
  #     - name: Start PostgreSQL container
  #       run: |
  #         docker run -d \
  #           --name postgres-test \
  #           -e POSTGRES_USER=${{secrets.POSTGRES_USERNAME}} \
  #           -e POSTGRES_PASSWORD=${{secrets.POSTGRES_PASSWORD}} \
  #           -e POSTGRES_DB=shop-product-docker \
  #           -p 5432:5432 \
  #           postgres:17

  #     - name: Wait for PostgreSQL to be ready
  #       run: |
  #         until docker exec postgres-test pg_isready -U ${{secrets.POSTGRES_USERNAME}}; do
  #           echo "Waiting for PostgreSQL..."
  #           sleep 2
  #         done
          
  #     # - name: Cache node modules
  #     #   id: cache-node-modules
  #     #   uses: actions/cache@v4
  #     #   with:
  #     #     path: node_modules
  #     #     key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
  #     #     restore-keys: |
  #     #       ${{ runner.os }}-node-modules-

  #     - name: Install dependencies
  #       run: npm ci

  #     - name: Run prisma generate
  #       run: npx prisma generate

  #     - name: Migrate Database
  #       run: npm run db:migrate

  #     - name: Run unit tests
  #       run: npm run test

  #     - name: Run code coverage
  #       run: npm run test:cov

  #     - name: upload code coverage
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: coverage-report
  #         path: coverage
  
  common-jobs:
      uses: ./.github/workflows/common-jobs.yaml # another repo can be used too
      # secrets: inherit # pass all secrets to the called workflow
      secrets:
        POSTGRES_USERNAME: ${{ secrets.POSTGRES_USERNAME }}
        POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      with:
        is_release: true
          
  dockernize:
    runs-on: ubuntu-latest
    # needs:
    #   - build
    #   - lint
    #   - test
    needs:
      - common-jobs
    steps:
      - name: Output common jobs status
        run: echo "Common jobs success status: ${{ needs.common-jobs.outputs.is_success }}"
        
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build docker image
        run: |
          docker buildx build \
            --platform linux/amd64 \
            -t mmshop-product-api:latest . --load

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

      - name: Push to DockerHub # push docker image to docker hub
        run: |
          docker tag mmshop-product-api:latest ${{ secrets.DOCKERHUB_USERNAME }}/mmshop-product-api:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/mmshop-product-api:latest