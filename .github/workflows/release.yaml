name: Release Workflow

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - release/**

concurrency:
  group: "${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '21'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: prisma generate
        run: npx prisma generate

      - name: Build the project
        run: npm run build

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build the project
        run: npm run lint

  test:
    env:
      DATABASE_URL: postgres://${{ secrets.POSTGRES_USENAME }}:${{secrets.POSTGRES_PASSWORD}}@localhost:5432/shop-product-docker
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USENAME }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: shop-product-docker
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    needs:
      - build
      - lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci

      - name: prisma generate
        run: npx prisma


      - name: prisma migrate deploy
        run: npm run db:migrate

      - name: Run tests
        run: npm test

      - name: Run test coverage
        run: npm run test:cov

      - name: Upload coverage to Codecov
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage
  
  dockernize:
    runs-on: ubuntu-latest
    needs:
      - build
      - lint
      - test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker buildx build --platform linux/amd64 -t mmshop-product-api:latest . --load
    
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Push Docker image to Docker Hub
        run: |
          docker tag mmshop-product-api ${{ secrets.DOCKER_HUB_USERNAME }}/mmshop-product-api:latest
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/mmshop-product-api:latest