name: CI WorkFlow

on:
  push:
    branches:
      - main # trigger github event
  pull_request:
    branches:
      - main # trigger github event
    # types: [opened, synchronize, reopened, closed]
    types: [opened, synchronize, reopened]

concurrency: # prevent multiple run
  group: 'ci-workflow' # unique group name
  cancel-in-progress: false # cancel in-progress runs

# on: workflow_dispatch // manual trigger

# env: # global env variables
#   os: ubuntu

jobs:
  build: # job name
    # strategy:
    #   matrix:
    #     os: [ubuntu-latest, macos-latest, windows-latest] # jobs matrix
    #     # node: [21, 22] # can use multiple matrix
    #     node: [22] # can use multiple matrix
    # runs-on: ${{ matrix.os }} # can use custom runners too
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code # git clones
        uses: actions/checkout@v5 # checkout code

      # install system dependency
      - name: Set up Node
        uses: actions/setup-node@v5
        with:
          node-version: '24'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci
      #   working-directory: ./frontend # change directory

      - name: prisma generate
        run: npx prisma generate

      # - name: Cache node modules
      #   id: cache-node-modules
      #   uses: actions/cache@v4
      #   with:
      #     path: node_modules
      #     key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
      #     restore-keys: |
      #       ${{ runner.os }}-node-modules-

      - name: Build the project
        run: npm run build

      - name: Operation System
        run: echo "This is running on $os"

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Node
        uses: actions/setup-node@v5
        with:
          node-version: '24'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

  unit-tests:
    env:
      DATABASE_URL: postgresql://${{secrets.POSTGRES_USERNAME}}:${{secrets.POSTGRES_PASSWORD}}@localhost:5432/shop-product-docker
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: ${{secrets.POSTGRES_USERNAME}}
          POSTGRES_PASSWORD: ${{secrets.POSTGRES_PASSWORD}}
          POSTGRES_DB: shop-product-docker
        ports:
          - "5432:5432"
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    needs: build # job dependency
    # permissions: # job level permissions
    #   contents: read # for actions/checkout
    #   packages: write # for uploading code coverage to github package registry
      # id-token: write # for actions/checkout
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Node
        uses: actions/setup-node@v5
        with:
          node-version: '24'
          cache: 'npm'

      # - name: Cache node modules
      #   id: cache-node-modules
      #   uses: actions/cache@v4
      #   with:
      #     path: node_modules
      #     key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
      #     restore-keys: |
      #       ${{ runner.os }}-node-modules-

      - name: Install dependencies
        run: npm ci

      - name: Run prisma generate
        run: npx prisma generate

      - name: Migrate Database
        run: npm run db:migrate

      - name: Run unit tests
        run: npm run test

      - name: Run code coverage
        run: npm run test:cov

      - name: upload code coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage
